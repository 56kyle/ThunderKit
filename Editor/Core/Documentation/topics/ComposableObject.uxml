<ui:UXML xmlns:ui="UnityEngine.UIElements" xmlns:uie="UnityEditor.UIElements" editor-extension-mode="True">
    <Style src="/Packages/com.passivepicasso.thunderkit/Editor/Core/Documentation/uss/thunderkit_documentation.uss" />
    <ui:VisualElement name="help-page" class="m4">
        <ui:VisualElement name="header" class="bm4" style="flex-direction: row; flex-basis: 64px; justify-content: flex-start; align-items: center; background-color: rgba(0, 0, 0, 0.39);">
            <ui:VisualElement name="icon" class="header-icon TK_ComposableObject_2X_Icon" />
            <ui:Label text="Composable Object" display-tooltip-when-elided="true" name="title" class="page-header" style="justify-content: center; margin-left: 10px;" />
        </ui:VisualElement>
        <ui:Label text="ThunderKit is aims to be an extensible platform. To help achieve this goal the 3 core systems in ThunderKit are built upon the ComposableObject." display-tooltip-when-elided="true" name="forword-section" class="text-wrap bm4 cascadia m4" />
        <ui:Label text="The ComposableObject is a component system with a unified editor to allow the easy implementation of new component based data structures. The common editor enable you to create new Components for a existing and new ComposableObjects when a script template is specified." display-tooltip-when-elided="true" class="text-wrap m4" />
        <ui:Label text="Manifests, Pipelines, and PathReferences are built upon ComposableObject so that they can benefit from this common feature set, and to allow users to add new functionality as needed. The Add Script window will allow you to create new components for each of these systems. " display-tooltip-when-elided="true" class="text-wrap m4" />
        <ui:Label text="Continue reading below to gain an understanding of the existing systems ThunderKit uses to help you develop, test, and deploy your mods." display-tooltip-when-elided="true" class="text-wrap m4" />
    </ui:VisualElement>
    <ui:VisualElement style="height: 50px;" />
    <ui:VisualElement name="help-page" class="m4">
        <ui:VisualElement name="header" class="bm4" style="flex-direction: row; flex-basis: 64px; justify-content: flex-start; align-items: center; background-color: rgba(0, 0, 0, 0.39);">
            <ui:VisualElement name="icon" class="header-icon TK_PathReference_2X_Icon" />
            <ui:Label text="Path References" display-tooltip-when-elided="true" name="title" class="page-header" style="justify-content: center; margin-left: 10px;" />
        </ui:VisualElement>
        <ui:Label text="Path References are one of the 3 main systems you will be using in ThunderKit.  It sits between Manifests and Pipelines, providing the ability for Pipelines to be able to deploy your custom content. Due to this we should first understand how PathReferences work and how can be used." display-tooltip-when-elided="true" class="text-wrap bm4 m4" />
        <ui:Label text="PathReferences provide the ability for you to create a custom rule set for how paths are identified.  You setup these rules by adding Path Components.  A PathReference will execute each of its components in order and will have access to 2 sets of information depending on when they are executed." display-tooltip-when-elided="true" class="text-wrap bm4 m4" />
        <ui:Label text="In the first situation a PathReference has access only to infromation available on the Pipeline and static information available in the project.  This situation is when a PathReference is accessed from a Pipeline during a PipelineJob that isn&apos;t setup to execute against a Manifest." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="In the second a PathReference has access to the same information, plus it can access information about the Manifest currently being processed by the Pipeline. We will go over this in more detail in the Pipeline section." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="In ThunderKit Pipelines and Manifests any place you can enter a path to a file or a folder, you can use a PathReference by invoking it in the field to ensure common paths are always used correctly.  You can invoke a path reference by naming it in arrow brackets." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="For Example: &lt;ManifestName&gt;/manifest.json" display-tooltip-when-elided="true" class="m4 settings-background" style="white-space: normal;" />
        <ui:Label text="ThunderKit comes with a number of already defined PathReferences for the BepInEx workflow. Please note that some adjustments may be needed for different games." display-tooltip-when-elided="true" class="m4 text-wrap" />
        <ui:Label text="Finally it is important to note that fields which can use PathReferences do not automatically resolve.  They are resolved explicitly in PipelineJobs" display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
    </ui:VisualElement>
    <ui:VisualElement style="height: 50px;" />
    <ui:VisualElement name="help-page" class="m4">
        <ui:VisualElement name="header" class="bm4" style="flex-direction: row; flex-basis: 64px; justify-content: flex-start; align-items: center; background-color: rgba(0, 0, 0, 0.39);">
            <ui:VisualElement name="icon" class="header-icon TK_Manifest_2X_Icon" />
            <ui:Label text="Manifests and ManifestDatums" display-tooltip-when-elided="true" name="title" class="page-header" style="justify-content: center; margin-left: 10px;" />
        </ui:VisualElement>
        <ui:Label text="Manifests are where you will store all the information about your projects for ThunderKit to utilize. This includes meta data information for mod distribution systems like Thunderstore. Manifests are composed of ManifestDatums there are many ManifestDatums already available. Check the ManifestDatums section for a list of ManifestDatums and their functionality." display-tooltip-when-elided="true" name="forword-section" class="text-wrap cascadia m4" />
        <ui:Label text="All Manifests are prepopulated with a ManifestIdentity.  The ManifestIdentity is where information about the identity of a mod and what dependencies it has are stored.  You can drag and drop any Manifest into the Manifest Identity&apos;s Dependencies field, or access it from the Unity asset finder by clicking the small circle." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="ManifestDatums all have an array named Staging Paths.  This array of strings informs Pipelines where the information is expected to be written out to. As previously mentioned, the StagingPaths array can utilize PathReferences by invoking one with the arrow bracket operators &lt;&gt;. " display-tooltip-when-elided="true" class="text-wrap m4" />
        <ui:Label text="For Example: &lt;ManifestStagingRoot&gt;/AdditionalAssets" display-tooltip-when-elided="true" class="cascadia m4 settings-background" />
        <ui:Label text="This allows you to specify complex path rules for the deployment of your assets. See the PathReferences documentation for more information." display-tooltip-when-elided="true" class="text-wrap m4" />
        <ui:Label text="If you would like to check out an example, inspect the BepInEx (Default) manifest in the ThunderKit Package." display-tooltip-when-elided="true" class="text-wrap m4" />
    </ui:VisualElement>
    <ui:VisualElement style="height: 50px;" />
    <ui:VisualElement name="help-page" class="m4">
        <ui:VisualElement name="header" class="bm4" style="flex-direction: row; flex-basis: 64px; justify-content: flex-start; align-items: center; background-color: rgba(0, 0, 0, 0.39);">
            <ui:VisualElement name="icon" class="header-icon TK_Pipeline_2X_Icon" />
            <ui:Label text="Pipelines" display-tooltip-when-elided="true" name="title" class="page-header" style="justify-content: center; margin-left: 10px;" />
        </ui:VisualElement>
        <ui:Label text="Pipelines are the Build portion of ThunderKit. In combination with PathReferences and Manifests, a Pipeline can build Assemblies, AssetBundles, manifest files, and anything else a project may need." display-tooltip-when-elided="true" name="forword-section" class="text-wrap cascadia m4" />
        <ui:Label text="Pipelines are composed of a Manifest and a set of PipelineJobs. PipelineJobs will either execute once during a Pipeline run or once per Manifest. This can be indicated by the PipelineJob&apos;s name, functionality or explicit options on the PipelineJob.  See the documentation for a PipelineJob if you&apos;re unsure how it executes." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="When building a pipeline, you&apos;re goal is to setup your build process so that you don&apos;t have to manually conduct any steps.  You can build a custom pipeline by looking at the steps you take to build and deploy your mods for testing.  ThunderKit handles certain aspects of discovery for you.  For Example, You don&apos;t need to determine where your assemblies are built to from Unity, this is handled by the Stage Assemblies PipelineJob.  This means all you need to do is determine where the Assemblies should be placed and indicate this in an Manifest AssemblyDefinitions component using its StagingPath array." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="Each PipelineJob will use a ManifestDatums&apos; StagingPaths to deploy its content, if you are constructing a new PipelineJob, you should attempt to do this, as well as utilize PathReference&apos;s resolver on these output paths." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
        <ui:Label text="Some PipelineJobs include the ability to Exclude Manifests.  This can be used to exclude Manifests which have special deployment requirements,  such as a Mod Loader.  In these situations you may need to have explicit control over where and how the content of that Manifest is deployed.  The BepInEx (Default) template uses this to deploy BepInEx separately so that mods can properly be installed into its plugins, patchers and monomod folders." display-tooltip-when-elided="true" class="m4" style="white-space: normal;" />
    </ui:VisualElement>
    <ui:VisualElement style="height: 100px;" />
</ui:UXML>
